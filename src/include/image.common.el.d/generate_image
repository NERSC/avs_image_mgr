# Auto-Versioning Systems Image Manager, Copyright (c) 2013, The
# Regents of the University of California, through Lawrence Berkeley
# National Laboratory (subject to receipt of any required approvals
# from the U.S. Dept. of Energy).  All rights reserved.
# 
# If you have questions about your rights to use or distribute this
# software, please contact Berkeley Lab's Technology Transfer
# Department at TTD@lbl.gov.
# 
# NOTICE.  This software is owned by the U.S. Department of Energy.
# As such, the U.S. Government has been granted for itself and others
# acting on its behalf a paid-up, nonexclusive, irrevocable, worldwide
# license in the Software to reproduce, prepare derivative works, and
# perform publicly and display publicly.  Beginning five (5) years
# after the date permission to assert copyright is obtained from the
# U.S. Department of Energy, and subject to any subsequent five (5)
# year renewals, the U.S. Government is granted for itself and others
# acting on its behalf a paid-up, nonexclusive, irrevocable, worldwide
# license in the Software to reproduce, prepare derivative works,
# distribute copies to the public, perform publicly and display
# publicly, and to permit others to do so.


# Create the most minimal EL image as possible
# inside the build directory.  Use the genimage
# utility provided by provide_genimage()
generate_image () {


    # Set up symbolic links required by newer versions of Fedora
    case $OS_FAMILY in
        el[56] )
            FS_PREFIX=""
            ;;
        el[7] )
            FS_PREFIX="usr"
            install -d -m 755 -o root -g root "${IMGROOT}/usr/"
            for dir in sbin bin lib64 lib; do
                ln -sf "${FS_PREFIX}/${dir}" "${IMGROOT}/${dir}"
                mkdir "${IMGROOT}/${FS_PREFIX}/${dir}"
            done
            install -d -m 755 -o root -g root "${IMGROOT}/lib/modules/"
            ;;
        * )
            echo "Unsupported \$OS_FAMILY $OS_FAMILY"
            ;;
    esac


    GENIMAGE=$(provide_genimage)

    echo "Using genimage from $GENIMAGE"

    # Gather information about this image from xCAT
    _IMAGEMETADATA="$(xcat_image_metadata)"
    _PKGLIST="$(echo "$_IMAGEMETADATA" | sed -ne 's/^\ *pkglist=\(.*\)$/\1/p')"
    _ROOTIMGDIR="$(echo "$_IMAGEMETADATA" | sed -ne 's/^\ *rootimgdir=\(.*\)$/\1/p')"

    if [ -z $_PKGLIST ]; then
        echo "No pkglist found; check osimage settings (lsdef -t osimage ${OS}-${ARCH}-netboot-${PROFILE} -l) and the osimage and linuximage tables"
        return 1
    elif [ -z $_ROOTIMGDIR ]; then
        echo "No rootimgdir found; check osimage settings (lsdef -t osimage ${OS}-${ARCH}-netboot-${PROFILE} -l) and the osimage and linuximage tables"
        return 1
    fi

    # Set up a minimal pkglist and mount it at the xCAT pkglist
    # location
    _TMP_PKGLIST=$(mktemp /tmp/image_mgr.XXXXXXXXXX)
    print_minimal_pkglist > $_TMP_PKGLIST
    bind_mount $_TMP_PKGLIST $_PKGLIST

    # Mount our build area at the xCAT image location
    bind_mount $IMG_BASE_DIR $_ROOTIMGDIR

    # Check that the xCAT image location now only contains 4 items: .
    # .. markers and rootimg
    if [[ "$(ls -a1 $_ROOTIMGDIR | wc -l)" != "4" ]]; then 
        echo "$_ROOTIMGDIR is not a fresh build directory"
        echo "Only markers and rootimg should be present."
        ls -a1 $_ROOTIMGDIR
        return 1
    fi

    target_mkdir "/${FS_PREFIX}/sbin"
    target_mkdir /dev

    # Copy some default configuration files to /etc/ in the build
    # directory
    target_mkdir /etc
    target_mkdir /etc/rpm

    for _FILE in passwd group motd; do
        install -o root -g root -m 644 \
            ${IMAGEFILES}/etc/${_FILE}.netboot ${IMGROOT}/etc/${_FILE}
    done

    install -o root -g root -m 400 \
        ${IMAGEFILES}/etc/shadow.netboot ${IMGROOT}/etc/shadow


    # Create an RPM macros file
    if [[ "$INSTALL_DOCS" == "no" ]]; then
        echo '%_excludedocs 1' >> $IMGROOT/etc/rpm/macros
    fi
    if [[ "$INSTALL_LOCALES" != "" ]]; then
        echo '%_install_langs '"${INSTALL_LOCALES}" >> $IMGROOT/etc/rpm/macros
    fi

    # Mount this macros file at ${HOME}/.rpmmacros
    bind_mount $IMGROOT/etc/rpm/macros ~/.rpmmacros

    # Install "busybox.anaconda" and "nash", which are needed for the
    # genimage-created initrd
    install -o root -g root -m 755 \
        $IMAGEFILES/busybox.anaconda $IMGROOT/sbin/
    install -o root -g root -m 755 \
        $IMAGEFILES/nash $IMGROOT/sbin/


    NET_MODULES="bnx2,tg3,forcedeth,igb,e1000,e1000e,virtio,virtio_pci,virtio_net"
    STORAGE_MODULES="sd_mod,scsi_transport_sas,mptscsih,mptsas,ata_piix,sata_nv,sata_mv,virtio_blk,auth_rpcgss"

    case $OS_FAMILY in
        el5 ) 
            FS_MODULES="ext3"
            ;;
        el[67] ) 
            FS_MODULES="ext3,ext4"
            target_mkdir /${FS_PREFIX}/lib/firmware
            for MODULE in $(echo $NET_MODULES $STORAGE_MODULES | tr ',' ' '); do
                if [ -e /lib/firmware/$MODULE ]; then
                    rsync -avSH /lib/firmware/$MODULE $IMGROOT/lib/firmware/
                fi
            done

            # Create a hotplug script to handle firmware load requests
            _TMP_HOTPLUG=$(mktemp /tmp/image_mgr.XXXXXXXXXX)
            cat > $_TMP_HOTPLUG << 'EOF'
#!/sbin/busybox.anaconda sh
echo "$0 active:"
/sbin/busybox.anaconda sh
env
echo 1 > /sys/$DEVPATH/loading
cat /lib/firmware/$FIRMWARE > /sys/$DEVPATH/data
echo 0 > /sys/$DEVPATH/loading
echo "$0 exiting"
EOF
            install -o root -g root -m 755 \
                $_TMP_HOTPLUG $IMGROOT/sbin/hotplug
            ;;
        * )
            echo "Unsupported \$OS_FAMILY $OS_FAMILY"
            fail
            ;;
    esac

    # Launch genimage with the following arguments:
    # -i: Interfaces to activate
    # -n: Modules to try loading before bringing up the network
    # -o: OS version
    # -p: xCAT profile to use
    # -l: Maximum size of / ramdisk (tmpfs)
    cd /opt/xcat/share/xcat/netboot/rh
    PERL5LIB=/opt/xcat/share/xcat/netboot/imgutils/ $GENIMAGE \
    -l ${ROOTSIZE}m \
    -i eth0 \
    -n ${NET_MODULES},${FS_MODULES},${STORAGE_MODULES} \
    -a $ARCH \
    -k $(kernel_variant) \
    -o $OS \
    -p $PROFILE \
    0>/dev/null

    # Unmount our pkglist and build area from the xCAT locations
    umount $_ROOTIMGDIR
    umount $_PKGLIST

    case $OS_FAMILY in
        el5 ) 
            mknod $IMGROOT/dev/rtc c 10 135
            ;;
        el6 ) 
            ;;
        el7)
            #sed -ie 's/^\(enabled=\)0$/\11/g' $IMGROOT/etc/yum.repos.d/rhel-beta.repo 
            ;;
    esac


    # Remove some packages that cannot be excluded in the packages
    # file.  See
    # http://lists.centos.org/pipermail/centos/2009-April/075627.html
    #
    case $OS_FAMILY in
        el[56] ) 
            # Removing util-linux-ng with yum and %_excludedocs set appears
            # not to work; use the "rpm" utility instead until a solution can
            # be found
            $YUM install rpm
            in_target rpm -e --nodeps util-linux-ng
            $YUM remove rpm
            ;;
    esac

    $YUM remove slang usermode wireless-tools \
        cryptsetup-luks dbus dmidecode hwdata libgpg-error libusb \
        libvolume_id libxml2-python pciutils \
        cyrus-sasl-lib logrotate


    # Remove unnecessary locales, if requested
    if [[ "$INSTALL_LOCALES" != "" ]]; then
        echo "Removing locales not matching $INSTALL_LOCALES"
        # %_install_langs does not seem to affect what is in the localedef
        # file.  Remove unnecessary locales from the localedef file
        for _LOCALE in $(in_target localedef --list-archive); do
            _LOCALE_VALIDATED=0
            for _OK_LOCALE in $(echo "$INSTALL_LOCALES" | tr ':' ' '); do
                if [[ "$_LOCALE" == "$_OK_LOCALE" ]]; then
                    _LOCALE_VALIDATED=1
                fi 
            done
            if [ $_LOCALE_VALIDATED -eq 0 ]; then
                in_target localedef --delete-from-archive "$_LOCALE"
            fi
        done

        # Now, we need to install the new locale-archive file as
        # locale-archive.tmpl, and run build-locale-archive to
        # generate a much smaller locale-archive file.  Once this is
        # done, we can remove locale-archive.tmpl
        install -o root -g root -m 644 $IMGROOT/usr/lib/locale/locale-archive \
            $IMGROOT/usr/lib/locale/locale-archive.tmpl
        in_target build-locale-archive
        rm -f $IMGROOT/usr/lib/locale/locale-archive.tmpl

    fi

    # Remove any stale OFED modules from the image
    rm -rf $IMGROOT/lib/modules/*/extra/ofa_kernel

    # Update the shadow file
    install -o root -g root -m 400 \
        ${IMAGEFILES}/etc/shadow.netboot ${IMGROOT}/etc/shadow

}

# Print the most minimal pkglist possible for this image type
print_minimal_pkglist () {

# See http://lists.centos.org/pipermail/centos/2009-April/075627.html 
cat << 'EOF'

-audit-libs-python
-checkpolicy
-dhcpv6-client
-ecryptfs-utils
-ed
-file
-gnu-efi
-gpm
-hdparm
-kbd
-libhugetlbfs
-libselinux-python
-libsemanage
-nspr
-nss
-perl
-policycoreutils
-prelink
-selinux-policy
-selinux-policy-targeted
-setools
-setserial
-sysfsutils
-tcl
-udftools
-vim-enhanced
-kernel 
-openafs
busybox.x86_64
initscripts.x86_64
sl-release
util-linux-ng
EOF

    case $OS_FAMILY in
        el[56] ) 
            ;;
        el[7] ) 
            cat << 'EOF'
kernel
redhat-release
EOF
            ;;
    esac
}

