# Auto-Versioning Systems Image Manager, Copyright (c) 2013, The
# Regents of the University of California, through Lawrence Berkeley
# National Laboratory (subject to receipt of any required approvals
# from the U.S. Dept. of Energy).  All rights reserved.
# 
# If you have questions about your rights to use or distribute this
# software, please contact Berkeley Lab's Technology Transfer
# Department at TTD@lbl.gov.
# 
# NOTICE.  This software is owned by the U.S. Department of Energy.
# As such, the U.S. Government has been granted for itself and others
# acting on its behalf a paid-up, nonexclusive, irrevocable, worldwide
# license in the Software to reproduce, prepare derivative works, and
# perform publicly and display publicly.  Beginning five (5) years
# after the date permission to assert copyright is obtained from the
# U.S. Department of Energy, and subject to any subsequent five (5)
# year renewals, the U.S. Government is granted for itself and others
# acting on its behalf a paid-up, nonexclusive, irrevocable, worldwide
# license in the Software to reproduce, prepare derivative works,
# distribute copies to the public, perform publicly and display
# publicly, and to permit others to do so.


# generate_image
# Create the most minimal EL image as possible
# inside the build directory.  Use the specified
# generate_image_backend.
generate_image() {

    bind_mount "$(mktemp -d ${TMP_AREA}/image_mgr.XXXXXXXXXX)" /etc/yum.repos.d

    # Create a minimal list of packages
    local _TMP_PKGLIST="$(mktemp ${TMP_AREA}/image_mgr.XXXXXXXXXX)"
    print_minimal_pkglist > $_TMP_PKGLIST

    local _IMAGEMETADATA
    local _PKGLIST
    local _ROOTIMGDIR

    local _TMP_RINSE_SYSCONFDIR
    local _TMP_RINSE_LIBDIR

    case $IMAGE_BACKEND in
        xcat )
            # Gather information about this image from xCAT
            _IMAGEMETADATA="$(xcat_image_metadata)"

            _PKGLIST="$(echo "$_IMAGEMETADATA" | \
                        sed -ne 's/^\ *pkglist=\(.*\)$/\1/p')"

            _ROOTIMGDIR="$(echo "$_IMAGEMETADATA" | \
                           sed -ne 's/^\ *rootimgdir=\(.*\)$/\1/p')"

            if [ -z $_PKGLIST ]; then
                fail "No pkglist found; check osimage settings " \
                     "(lsdef -t osimage ${OS}-${ARCH}-netboot-${PROFILE} -l) " \
                     "and the osimage and linuximage tables"
            elif [ -z $_ROOTIMGDIR ]; then
                fail "No rootimgdir found; check osimage settings " \
                     "(lsdef -t osimage ${OS}-${ARCH}-netboot-${PROFILE} -l) " \
                     "and the osimage and linuximage tables"
            fi
            ;;
        rinse )
            _TMP_RINSE_SYSCONFDIR="$(mktemp -d ${TMP_AREA}/image_mgr.rinse_confdir.XXXXXXXXXX)" 
            _TMP_RINSE_LIBDIR="$(mktemp -d ${TMP_AREA}/image_mgr.rinse_libdir.XXXXXXXXXX)" 

            bind_mount "$_TMP_RINSE_SYSCONFDIR" "$RINSE_SYSCONFDIR"
            bind_mount "$_TMP_RINSE_LIBDIR" "$RINSE_LIBDIR"

            _PKGLIST="${RINSE_SYSCONFDIR}/image_mgr.packages"
            sed -i 's/\.'${ARCH}'//g' "$_TMP_PKGLIST"
            sed -i 's/^-.*$//g' "$_TMP_PKGLIST"
            sed -i 's/^kernel.*$//g' "$_TMP_PKGLIST"

            cat "$_TMP_PKGLIST"

            _ROOTIMGDIR="${TMP_AREA}/_world"
            ;;
        * )
            fail "Unsupported \$IMAGE_BACKEND $IMAGE_BACKEND"
            ;;
    esac


    # Mount our build area at the image root location
    bind_mount $IMG_BASE_DIR $_ROOTIMGDIR

    # Mount the provided pkglist at the target pkglist location
    bind_mount $_TMP_PKGLIST $_PKGLIST

    # Check that the image location now only contains 4 items: .
    # .. markers and rootimg
    if [[ "$(ls -a1 $_ROOTIMGDIR | wc -l)" != "4" ]]; then 
        echo "$_ROOTIMGDIR is not a fresh build directory"
        echo "Only markers and rootimg should be present."
        ls -a1 $_ROOTIMGDIR
        return 1
    fi

    # Copy some default directories
    target_mkdir /etc
    target_mkdir /etc/rpm

    # Install default passwd, group, shadow, and MOTD
    install_file etc/group.netboot  /etc/group  644
    install_file etc/motd.netboot   /etc/motd   644
    install_file etc/passwd.netboot /etc/passwd 644
    install_file etc/shadow.netboot /etc/shadow 400

    # Create an RPM macros file
    if [[ "$INSTALL_DOCS" == "no" ]]; then
        echo '%_excludedocs 1' >> $IMGROOT/etc/rpm/macros
    fi
    if [[ "$INSTALL_LOCALES" != "" ]]; then
        echo '%_install_langs '"${INSTALL_LOCALES}" >> $IMGROOT/etc/rpm/macros
    fi

    # Mount this macros file at ${HOME}/.rpmmacros and /etc/rpm/macros
    bind_mount $IMGROOT/etc/rpm/macros ~/.rpmmacros
    bind_mount $IMGROOT/etc/rpm/macros /etc/rpm/macros


    case $IMAGE_BACKEND in
        xcat )
            generate_image_xcat "$_ROOTIMGDIR" "$_PKGLIST"
            ;;
        rinse )
            generate_image_rinse "$_ROOTIMGDIR" "$_PKGLIST"
            ;;
    esac

    # Unmount our pkglist and build area
    umount $_ROOTIMGDIR
    umount $_PKGLIST


    # Remove some packages that cannot be excluded in the packages
    # file.  See
    # http://lists.centos.org/pipermail/centos/2009-April/075627.html
    #
    case $OS_FAMILY in
        el6 ) 
            # Removing util-linux-ng with yum and %_excludedocs set appears
            # not to work; use the "rpm" utility instead until a solution can
            # be found
            $YUM install rpm
            $RPM -e --nodeps util-linux-ng
            $YUM remove rpm
            ;;
    esac

    case $OS_FAMILY in
        el5 ) 
            $YUM remove slang usermode wireless-tools \
                cryptsetup-luks dbus dmidecode \
                hwdata libusb libxml2-python cyrus-sasl-lib \
                libgpg-error libvolume_id pciutils logrotate
            ;;
    esac

    # Remove any stale OFED modules from the image
    rm -rf $IMGROOT/lib/modules/*/extra/ofa_kernel

    # Update the shadow file
    install_file etc/shadow.netboot /etc/shadow 400
    rm -f "$_TMP_PKGLIST"
}

# generate_image_xcat [rootimgdir] [pkglist]
# Create an image using the xCAT backend.  Use the genimage utility
# provided by provide_genimage()
generate_image_xcat () {

    local _ROOTIMGDIR="$1"; shift
    local _PKGLIST="$1"; shift

    # Set up symbolic links required by newer versions of Fedora
    case $OS_FAMILY in
        el[56] )
            FS_PREFIX=""
            ;;
        el[7] )
            FS_PREFIX="usr"
            install -d -m 755 -o root -g root "${IMGROOT}/usr/"
            for dir in sbin bin lib64 lib; do
                ln -sf "${FS_PREFIX}/${dir}" "${IMGROOT}/${dir}"
                mkdir "${IMGROOT}/${FS_PREFIX}/${dir}"
            done
            install -d -m 755 -o root -g root "${IMGROOT}/lib/modules/"
            ;;
        * )
            echo "Unsupported \$OS_FAMILY $OS_FAMILY"
            ;;
    esac

    # Create some default directories
    target_mkdir "/${FS_PREFIX}/sbin"
    target_mkdir /dev

    GENIMAGE=$(provide_genimage)

    echo "Using genimage from $GENIMAGE"

    # Install "busybox.anaconda" and "nash" if they are present
    # in $IMAGEFILES.  These are needed for initrds created
    # with old versions of genimage
    install_file busybox.anaconda /sbin/ 755
    install_file nash /sbin/ 755



    NET_MODULES="bnx2,tg3,forcedeth,igb,e1000,e1000e,virtio,virtio_pci,virtio_net"
    STORAGE_MODULES="sd_mod,scsi_transport_sas,mptscsih,mptsas,ata_piix,sata_nv,sata_mv,virtio_blk,auth_rpcgss"

    case $OS_FAMILY in
        el5 ) 
            FS_MODULES="ext3"
            ;;
        el[67] ) 
            FS_MODULES="ext3,ext4"
            target_mkdir /${FS_PREFIX}/lib/firmware
            for MODULE in $(echo $NET_MODULES $STORAGE_MODULES | tr ',' ' '); do
                if [ -e /lib/firmware/$MODULE ]; then
                    rsync -avSH /lib/firmware/$MODULE $IMGROOT/lib/firmware/
                fi
            done

            # Create a hotplug script to handle firmware load requests
            _TMP_HOTPLUG=$(mktemp ${TMP_AREA}/image_mgr.XXXXXXXXXX)
            cat > $_TMP_HOTPLUG << 'EOF'
#!/sbin/busybox.anaconda sh
echo "$0 active:"
/sbin/busybox.anaconda sh
env
echo 1 > /sys/$DEVPATH/loading
cat /lib/firmware/$FIRMWARE > /sys/$DEVPATH/data
echo 0 > /sys/$DEVPATH/loading
echo "$0 exiting"
EOF
            install -o root -g root -m 755 \
                $_TMP_HOTPLUG $IMGROOT/sbin/hotplug
            ;;
        * )
            echo "Unsupported \$OS_FAMILY $OS_FAMILY"
            fail
            ;;
    esac


    # Hide the weak-updates area to prevent any links there from
    # being placed into the image by genimage
    case $OS_FAMILY in
        el* )
            _WEAK_UPDATES="/lib/modules/${KERNEL}/weak-updates/"
            [ ! -d "$_WEAK_UPDATES" ] || \
                bind_mount /var/empty "$_WEAK_UPDATES"
            ;;
    esac

    # Launch genimage with the following arguments:
    # -i: Interfaces to activate
    # -n: Modules to try loading before bringing up the network
    # -o: OS version
    # -p: xCAT profile to use
    # -l: Maximum size of / ramdisk (tmpfs)
    cd "$(dirname "$GENIMAGE")"
    PERL5LIB=/opt/xcat/share/xcat/netboot/imgutils/ "$GENIMAGE" \
    -l ${ROOTSIZE}m \
    -i eth0 \
    -n ${NET_MODULES},${FS_MODULES},${STORAGE_MODULES} \
    -a $ARCH \
    -k $(kernel_variant) \
    -o $OS \
    -p $PROFILE \
    0>/dev/null

    case $OS_FAMILY in
        el5 ) 
            mknod $IMGROOT/dev/rtc c 10 135
            ;;
        el6 )
            $YUM remove dracut
            ;;
    esac


}

# Print a URL pointing to packages for $OS
pkg_url () {
    case $OS_MAJOR_VERSION in
        SL5 )
            echo "http://ftp.scientificlinux.org/linux/scientific/$(echo ${OS_RELEASE}|tr -d '.')/${ARCH}/SL/"
            ;;
        SL[67] )
            echo "http://ftp.scientificlinux.org/linux/scientific/${OS_RELEASE}/${ARCH}/os/Packages/"
            ;;
        * )
            fail "Unsupported \$OS_MAJOR_VERSION $OS_MAJOR_VERSION"
        ;;
    esac
}

# Print the most minimal pkglist possible for this image type
print_minimal_pkglist () {

# See http://lists.centos.org/pipermail/centos/2009-April/075627.html 
cat << EOF

-audit-libs-python
-checkpolicy
-dhcpv6-client
-ecryptfs-utils
-ed
-file
-gnu-efi
-gpm
-hdparm
-kbd
-libhugetlbfs
-libselinux-python
-libsemanage
-nspr
-nss
-perl
-policycoreutils
-prelink
-selinux-policy
-selinux-policy-targeted
-setools
-setserial
-sysfsutils
-tcl
-udftools
-vim-enhanced
-kernel 
-openafs
busybox.${ARCH}
initscripts.${ARCH}
kernel.${ARCH}
rpm.${ARCH}
sl-release
util-linux-ng.${ARCH}
EOF


    case $OS_MAJOR_VERSION in
        SL5)
            echo yum-conf-$(echo $OS_RELEASE | tr -d '.')
            echo yum-conf-sl5x
            echo rpm.${ARCH}
            cat << EOF
audit-libs
basesystem
bash
beecrypt
binutils
bzip2-libs
centos-release
chkconfig
coreutils
cpio
cracklib
cracklib-dicts
crontabs
db4
device-mapper
device-mapper-event
device-mapper-multipath
dmraid
dmraid-events
e2fsprogs
e2fsprogs-libs
elfutils-libelf
ethtool
expat
filesystem
findutils
gawk
gdbm
glib2
glibc
glibc-common
grep
gzip
hmaccalc
info
initscripts
iproute
iputils
keyutils-libs
keyutils-libs-devel
kpartx
krb5-libs
less
libacl
libattr
libcap
libgcc
libidn
libselinux
libsepol
libstdc++
libsysfs
libtermcap
libxml2
libxml2-python
logrotate
lvm2
m2crypto
MAKEDEV
mcstrans
mingetty
mkinitrd
mktemp
module-init-tools
nash
ncurses
neon
net-tools
nspr
nss
openssl
pam
pcre
popt
procps
psmisc
python
python-elementtree
python-iniparse
python-libs
python-libs
python-sqlite
python-urlgrabber
readline
rpm
rpm-libs
rpm-python
sed
setup
sgpio
shadow-utils
sqlite
sysklogd
SysVinit
tar
termcap
tzdata
udev
util-linux
yum
yum-autoupdate
yum-metadata-parser
zlib
EOF
            ;;
        SL7)
            echo yum-conf-sl7x
            ;;
    esac


}

