# Auto-Versioning Systems Image Manager, Copyright (c) 2013, The
# Regents of the University of California, through Lawrence Berkeley
# National Laboratory (subject to receipt of any required approvals
# from the U.S. Dept. of Energy).  All rights reserved.
# 
# If you have questions about your rights to use or distribute this
# software, please contact Berkeley Lab's Technology Transfer
# Department at TTD@lbl.gov.
# 
# NOTICE.  This software is owned by the U.S. Department of Energy.
# As such, the U.S. Government has been granted for itself and others
# acting on its behalf a paid-up, nonexclusive, irrevocable, worldwide
# license in the Software to reproduce, prepare derivative works, and
# perform publicly and display publicly.  Beginning five (5) years
# after the date permission to assert copyright is obtained from the
# U.S. Department of Energy, and subject to any subsequent five (5)
# year renewals, the U.S. Government is granted for itself and others
# acting on its behalf a paid-up, nonexclusive, irrevocable, worldwide
# license in the Software to reproduce, prepare derivative works,
# distribute copies to the public, perform publicly and display
# publicly, and to permit others to do so.


generic_fail () {
    echo "Failure detected"
    fail "$@" "Failure detected"
}

# hr
# Print a horizontal line
hr() {
    for _c in $(seq 1 $(tput cols)); do
        echo -n '-'
    done
    echo
}

fail () {

    cd "${CWD_ORIG}"
    echo -e "\n\n"
    if [ $# -gt 2 ]; then
        # Throw away the top frame information, since it is our error
        # handling function
        _FRAME=1
        _FILE="$(basename $0)"
        _SRC="$1"
        shift
        _LINE="$1"
        shift
        _CODE="$1"
        shift

        echo -e "\n\n"
        hr
        echo -e "* Environment:"
        hr
        env
        hr

        echo -e "\n\n"
        hr
        echo -e "* Call stack:"
        hr
        while true; do
            # Get the information about this frame
            _C=($(caller $_FRAME)) || break

            # Get the line, function name, and file name of current
            # code location in this frame
            _ELINE="${_C[0]}"
            _EFUNC="${_C[1]}"
            _EFILE="${_C[2]}"

            # Determine how much space we have to print out the
            # pertinent lines
            _LN="$(($(tput cols)-70))"
            [ $_LN -gt 2 ] || _LN=2

            # Print the information about this frame
            printf "[%38s] [%-20s] %-${_LN}s\n" \
                "$(echo ${_EFILE}:${_ELINE} | tail -c 37)" \
                "$(echo ${_EFUNC} | cut -c -17)" \
                "$(sed -n ${_ELINE}p ${_EFILE} || echo -n '(no data)' | tr -d '\n')"
            _FRAME=$((${_FRAME}+1))
        done
        hr
        echo -e "\n*** Error $_CODE in $_SRC near line $_LINE. ***\n"
    else
        echo -e "\n*** Error: ${@} ***\n"
    fi
    hr
    exit 1
}

load_functions () {
    if [ -d "${1}" ]; then
        for _FUNCTIONS in "${1}"/*; do
            . $_FUNCTIONS
        done
    fi
}

image_mgr_prep () {
    # Load core image_mgr functions
    load_functions include/image_mgr_core.d/
    
    # Load functions that should be useful for all images
    load_functions include/image.common.d/
    
}

image_mgr_specialize() {
    # Load functions specific to the OS Family of our image (e.g., el5 or
    # el6)
    load_functions include/image.common.${OS_FAMILY}.d/
    
    # Load functions specific to our OS (e.g., SL6.3)
    load_functions include/image.common.${OS}.d/
    
    # Load functions specific to our image
    load_functions image-specific/include/image.${PROFILE}.d/
}
